CMAKE_MINIMUM_REQUIRED (VERSION 3.1)

################################
# G2O
################################

SET(G2O_LIB "g2o")

IF(NOT PROJECT_NAME)
  PROJECT(${G2O_LIB})
ENDIF(NOT PROJECT_NAME)

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -Wall  -O3 -march=native ")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall  -O3 -march=native")

# Generate config.h
configure_file(${CMAKE_CURRENT_LIST_DIR}/config.h.in ${CMAKE_CURRENT_LIST_DIR}/config.h)

# Compiler specific options for gcc
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -march=native") 
SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -O3 -march=native") 

################################
# File Globbing
################################

FILE(GLOB_RECURSE G2O_HEADERS "${CMAKE_CURRENT_LIST_DIR}/g2o/*.h")
FILE(GLOB_RECURSE G2O_SOURCES "${CMAKE_CURRENT_LIST_DIR}/g2o/*.cpp")

SET(G2O_RESOURCES ${G2O_SOURCES} ${G2O_HEADERS})

# Set up the top-level include directories
INCLUDE_DIRECTORIES(
  ${CMAKE_CURRENT_LIST_DIR}/core
  ${CMAKE_CURRENT_LIST_DIR}/types
  ${CMAKE_CURRENT_LIST_DIR}/stuff 
)
################################
# Target Definitions
################################

ADD_LIBRARY(${G2O_LIB} STATIC ${G2O_RESOURCES})

TARGET_INCLUDE_DIRECTORIES(${G2O_LIB} PUBLIC "${CMAKE_CURRENT_LIST_DIR}/include")

SET_TARGET_PROPERTIES(${G2O_LIB} PROPERTIES
  DEBUG_POSTFIX "_d"
  LIBRARY_OUTPUT_DIRECTORY ../lib/
  LIBRARY_OUTPUT_DIRECTORY_DEBUG ../lib/
  LIBRARY_OUTPUT_DIRECTORY_RELEASE ../lib/
  LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ../lib/
  ARCHIVE_OUTPUT_DIRECTORY ../lib/
  ARCHIVE_OUTPUT_DIRECTORY_DEBUG ../lib/
  ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ../lib/
  ARCHIVE_OUTPUT_DIRECTORY_RELEASE ../lib/)

################################
# Dependencies
################################
FIND_PACKAGE(Eigen3 3.1.0 REQUIRED)

INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIR})


# # Uncomment to display all CMAKE variables:
# GET_CMAKE_PROPERTY(VARIABLE_NAMES VARIABLES)
# FOREACH (VARIABLE_NAME ${VARIABLE_NAMES})
#    MESSAGE(STATUS "${VARIABLE_NAME}=${${VARIABLE_NAME}}")
# ENDFOREACH()
