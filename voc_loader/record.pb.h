// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#ifndef PROTOBUF_record_2eproto__INCLUDED
#define PROTOBUF_record_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_record_2eproto();
void protobuf_AssignDesc_record_2eproto();
void protobuf_ShutdownFile_record_2eproto();

class header_t;
class record_t;
class file_t;

// ===================================================================

class header_t : public ::google::protobuf::Message {
 public:
  header_t();
  virtual ~header_t();

  header_t(const header_t& from);

  inline header_t& operator=(const header_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const header_t& default_instance();

  void Swap(header_t* other);

  // implements Message ----------------------------------------------

  header_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const header_t& from);
  void MergeFrom(const header_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_k = 1;
  inline bool has_m_k() const;
  inline void clear_m_k();
  static const int kMKFieldNumber = 1;
  inline ::google::protobuf::int32 m_k() const;
  inline void set_m_k(::google::protobuf::int32 value);

  // required int32 m_L = 2;
  inline bool has_m_l() const;
  inline void clear_m_l();
  static const int kMLFieldNumber = 2;
  inline ::google::protobuf::int32 m_l() const;
  inline void set_m_l(::google::protobuf::int32 value);

  // required int32 m_scoring = 3;
  inline bool has_m_scoring() const;
  inline void clear_m_scoring();
  static const int kMScoringFieldNumber = 3;
  inline ::google::protobuf::int32 m_scoring() const;
  inline void set_m_scoring(::google::protobuf::int32 value);

  // required int32 m_weighting = 4;
  inline bool has_m_weighting() const;
  inline void clear_m_weighting();
  static const int kMWeightingFieldNumber = 4;
  inline ::google::protobuf::int32 m_weighting() const;
  inline void set_m_weighting(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:header_t)
 private:
  inline void set_has_m_k();
  inline void clear_has_m_k();
  inline void set_has_m_l();
  inline void clear_has_m_l();
  inline void set_has_m_scoring();
  inline void clear_has_m_scoring();
  inline void set_has_m_weighting();
  inline void clear_has_m_weighting();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_k_;
  ::google::protobuf::int32 m_l_;
  ::google::protobuf::int32 m_scoring_;
  ::google::protobuf::int32 m_weighting_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_record_2eproto();
  friend void protobuf_AssignDesc_record_2eproto();
  friend void protobuf_ShutdownFile_record_2eproto();

  void InitAsDefaultInstance();
  static header_t* default_instance_;
};
// -------------------------------------------------------------------

class record_t : public ::google::protobuf::Message {
 public:
  record_t();
  virtual ~record_t();

  record_t(const record_t& from);

  inline record_t& operator=(const record_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const record_t& default_instance();

  void Swap(record_t* other);

  // implements Message ----------------------------------------------

  record_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const record_t& from);
  void MergeFrom(const record_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 parent = 2;
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 2;
  inline ::google::protobuf::uint32 parent() const;
  inline void set_parent(::google::protobuf::uint32 value);

  // required double weight = 4;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 4;
  inline double weight() const;
  inline void set_weight(double value);

  // required bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:record_t)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_parent();
  inline void clear_has_parent();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 parent_;
  double weight_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_record_2eproto();
  friend void protobuf_AssignDesc_record_2eproto();
  friend void protobuf_ShutdownFile_record_2eproto();

  void InitAsDefaultInstance();
  static record_t* default_instance_;
};
// -------------------------------------------------------------------

class file_t : public ::google::protobuf::Message {
 public:
  file_t();
  virtual ~file_t();

  file_t(const file_t& from);

  inline file_t& operator=(const file_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const file_t& default_instance();

  void Swap(file_t* other);

  // implements Message ----------------------------------------------

  file_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const file_t& from);
  void MergeFrom(const file_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .header_t header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::header_t& header() const;
  inline ::header_t* mutable_header();
  inline ::header_t* release_header();
  inline void set_allocated_header(::header_t* header);

  // repeated .record_t nodes = 2;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 2;
  inline const ::record_t& nodes(int index) const;
  inline ::record_t* mutable_nodes(int index);
  inline ::record_t* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::record_t >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::record_t >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:file_t)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::header_t* header_;
  ::google::protobuf::RepeatedPtrField< ::record_t > nodes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_record_2eproto();
  friend void protobuf_AssignDesc_record_2eproto();
  friend void protobuf_ShutdownFile_record_2eproto();

  void InitAsDefaultInstance();
  static file_t* default_instance_;
};
// ===================================================================


// ===================================================================

// header_t

// required int32 m_k = 1;
inline bool header_t::has_m_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void header_t::set_has_m_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void header_t::clear_has_m_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void header_t::clear_m_k() {
  m_k_ = 0;
  clear_has_m_k();
}
inline ::google::protobuf::int32 header_t::m_k() const {
  return m_k_;
}
inline void header_t::set_m_k(::google::protobuf::int32 value) {
  set_has_m_k();
  m_k_ = value;
}

// required int32 m_L = 2;
inline bool header_t::has_m_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void header_t::set_has_m_l() {
  _has_bits_[0] |= 0x00000002u;
}
inline void header_t::clear_has_m_l() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void header_t::clear_m_l() {
  m_l_ = 0;
  clear_has_m_l();
}
inline ::google::protobuf::int32 header_t::m_l() const {
  return m_l_;
}
inline void header_t::set_m_l(::google::protobuf::int32 value) {
  set_has_m_l();
  m_l_ = value;
}

// required int32 m_scoring = 3;
inline bool header_t::has_m_scoring() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void header_t::set_has_m_scoring() {
  _has_bits_[0] |= 0x00000004u;
}
inline void header_t::clear_has_m_scoring() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void header_t::clear_m_scoring() {
  m_scoring_ = 0;
  clear_has_m_scoring();
}
inline ::google::protobuf::int32 header_t::m_scoring() const {
  return m_scoring_;
}
inline void header_t::set_m_scoring(::google::protobuf::int32 value) {
  set_has_m_scoring();
  m_scoring_ = value;
}

// required int32 m_weighting = 4;
inline bool header_t::has_m_weighting() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void header_t::set_has_m_weighting() {
  _has_bits_[0] |= 0x00000008u;
}
inline void header_t::clear_has_m_weighting() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void header_t::clear_m_weighting() {
  m_weighting_ = 0;
  clear_has_m_weighting();
}
inline ::google::protobuf::int32 header_t::m_weighting() const {
  return m_weighting_;
}
inline void header_t::set_m_weighting(::google::protobuf::int32 value) {
  set_has_m_weighting();
  m_weighting_ = value;
}

// -------------------------------------------------------------------

// record_t

// required uint32 id = 1;
inline bool record_t::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void record_t::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void record_t::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void record_t::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 record_t::id() const {
  return id_;
}
inline void record_t::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 parent = 2;
inline bool record_t::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void record_t::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void record_t::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void record_t::clear_parent() {
  parent_ = 0u;
  clear_has_parent();
}
inline ::google::protobuf::uint32 record_t::parent() const {
  return parent_;
}
inline void record_t::set_parent(::google::protobuf::uint32 value) {
  set_has_parent();
  parent_ = value;
}

// required double weight = 4;
inline bool record_t::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void record_t::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void record_t::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void record_t::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline double record_t::weight() const {
  return weight_;
}
inline void record_t::set_weight(double value) {
  set_has_weight();
  weight_ = value;
}

// required bytes data = 5;
inline bool record_t::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void record_t::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void record_t::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void record_t::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& record_t::data() const {
  return *data_;
}
inline void record_t::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void record_t::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void record_t::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* record_t::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* record_t::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void record_t::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// file_t

// required .header_t header = 1;
inline bool file_t::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void file_t::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void file_t::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void file_t::clear_header() {
  if (header_ != NULL) header_->::header_t::Clear();
  clear_has_header();
}
inline const ::header_t& file_t::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::header_t* file_t::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::header_t;
  return header_;
}
inline ::header_t* file_t::release_header() {
  clear_has_header();
  ::header_t* temp = header_;
  header_ = NULL;
  return temp;
}
inline void file_t::set_allocated_header(::header_t* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// repeated .record_t nodes = 2;
inline int file_t::nodes_size() const {
  return nodes_.size();
}
inline void file_t::clear_nodes() {
  nodes_.Clear();
}
inline const ::record_t& file_t::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::record_t* file_t::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::record_t* file_t::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::record_t >&
file_t::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::record_t >*
file_t::mutable_nodes() {
  return &nodes_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_record_2eproto__INCLUDED
