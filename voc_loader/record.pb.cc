// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "record.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* header_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  header_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* record_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  record_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* file_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  file_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_record_2eproto() {
  protobuf_AddDesc_record_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "record.proto");
  GOOGLE_CHECK(file != NULL);
  header_t_descriptor_ = file->message_type(0);
  static const int header_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, m_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, m_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, m_scoring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, m_weighting_),
  };
  header_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      header_t_descriptor_,
      header_t::default_instance_,
      header_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(header_t));
  record_t_descriptor_ = file->message_type(1);
  static const int record_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_t, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_t, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_t, data_),
  };
  record_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      record_t_descriptor_,
      record_t::default_instance_,
      record_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(record_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(record_t));
  file_t_descriptor_ = file->message_type(2);
  static const int file_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_t, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_t, nodes_),
  };
  file_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      file_t_descriptor_,
      file_t::default_instance_,
      file_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(file_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(file_t));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_record_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    header_t_descriptor_, &header_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    record_t_descriptor_, &record_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    file_t_descriptor_, &file_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_record_2eproto() {
  delete header_t::default_instance_;
  delete header_t_reflection_;
  delete record_t::default_instance_;
  delete record_t_reflection_;
  delete file_t::default_instance_;
  delete file_t_reflection_;
}

void protobuf_AddDesc_record_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014record.proto\"L\n\010header_t\022\013\n\003m_k\030\001 \002(\005\022"
    "\013\n\003m_L\030\002 \002(\005\022\021\n\tm_scoring\030\003 \002(\005\022\023\n\013m_wei"
    "ghting\030\004 \002(\005\"D\n\010record_t\022\n\n\002id\030\001 \002(\r\022\016\n\006"
    "parent\030\002 \002(\r\022\016\n\006weight\030\004 \002(\001\022\014\n\004data\030\005 \002"
    "(\014\"=\n\006file_t\022\031\n\006header\030\001 \002(\0132\t.header_t\022"
    "\030\n\005nodes\030\002 \003(\0132\t.record_t", 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "record.proto", &protobuf_RegisterTypes);
  header_t::default_instance_ = new header_t();
  record_t::default_instance_ = new record_t();
  file_t::default_instance_ = new file_t();
  header_t::default_instance_->InitAsDefaultInstance();
  record_t::default_instance_->InitAsDefaultInstance();
  file_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_record_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_record_2eproto {
  StaticDescriptorInitializer_record_2eproto() {
    protobuf_AddDesc_record_2eproto();
  }
} static_descriptor_initializer_record_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int header_t::kMKFieldNumber;
const int header_t::kMLFieldNumber;
const int header_t::kMScoringFieldNumber;
const int header_t::kMWeightingFieldNumber;
#endif  // !_MSC_VER

header_t::header_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void header_t::InitAsDefaultInstance() {
}

header_t::header_t(const header_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void header_t::SharedCtor() {
  _cached_size_ = 0;
  m_k_ = 0;
  m_l_ = 0;
  m_scoring_ = 0;
  m_weighting_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

header_t::~header_t() {
  SharedDtor();
}

void header_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void header_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* header_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return header_t_descriptor_;
}

const header_t& header_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_record_2eproto();
  return *default_instance_;
}

header_t* header_t::default_instance_ = NULL;

header_t* header_t::New() const {
  return new header_t;
}

void header_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_k_ = 0;
    m_l_ = 0;
    m_scoring_ = 0;
    m_weighting_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool header_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_k = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_k_)));
          set_has_m_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_L;
        break;
      }

      // required int32 m_L = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_L:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_l_)));
          set_has_m_l();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_scoring;
        break;
      }

      // required int32 m_scoring = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_scoring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scoring_)));
          set_has_m_scoring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_weighting;
        break;
      }

      // required int32 m_weighting = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_weighting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_weighting_)));
          set_has_m_weighting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void header_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_k = 1;
  if (has_m_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_k(), output);
  }

  // required int32 m_L = 2;
  if (has_m_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_l(), output);
  }

  // required int32 m_scoring = 3;
  if (has_m_scoring()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_scoring(), output);
  }

  // required int32 m_weighting = 4;
  if (has_m_weighting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_weighting(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* header_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_k = 1;
  if (has_m_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_k(), target);
  }

  // required int32 m_L = 2;
  if (has_m_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_l(), target);
  }

  // required int32 m_scoring = 3;
  if (has_m_scoring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_scoring(), target);
  }

  // required int32 m_weighting = 4;
  if (has_m_weighting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_weighting(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int header_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_k = 1;
    if (has_m_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_k());
    }

    // required int32 m_L = 2;
    if (has_m_l()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_l());
    }

    // required int32 m_scoring = 3;
    if (has_m_scoring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scoring());
    }

    // required int32 m_weighting = 4;
    if (has_m_weighting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_weighting());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void header_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const header_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const header_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void header_t::MergeFrom(const header_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_k()) {
      set_m_k(from.m_k());
    }
    if (from.has_m_l()) {
      set_m_l(from.m_l());
    }
    if (from.has_m_scoring()) {
      set_m_scoring(from.m_scoring());
    }
    if (from.has_m_weighting()) {
      set_m_weighting(from.m_weighting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void header_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void header_t::CopyFrom(const header_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool header_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void header_t::Swap(header_t* other) {
  if (other != this) {
    std::swap(m_k_, other->m_k_);
    std::swap(m_l_, other->m_l_);
    std::swap(m_scoring_, other->m_scoring_);
    std::swap(m_weighting_, other->m_weighting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata header_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = header_t_descriptor_;
  metadata.reflection = header_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int record_t::kIdFieldNumber;
const int record_t::kParentFieldNumber;
const int record_t::kWeightFieldNumber;
const int record_t::kDataFieldNumber;
#endif  // !_MSC_VER

record_t::record_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void record_t::InitAsDefaultInstance() {
}

record_t::record_t(const record_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void record_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  parent_ = 0u;
  weight_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

record_t::~record_t() {
  SharedDtor();
}

void record_t::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void record_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* record_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return record_t_descriptor_;
}

const record_t& record_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_record_2eproto();
  return *default_instance_;
}

record_t* record_t::default_instance_ = NULL;

record_t* record_t::New() const {
  return new record_t;
}

void record_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    parent_ = 0u;
    weight_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool record_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_parent;
        break;
      }

      // required uint32 parent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_)));
          set_has_parent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_weight;
        break;
      }

      // required double weight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // required bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void record_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 parent = 2;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->parent(), output);
  }

  // required double weight = 4;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->weight(), output);
  }

  // required bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* record_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 parent = 2;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->parent(), target);
  }

  // required double weight = 4;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->weight(), target);
  }

  // required bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int record_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 parent = 2;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent());
    }

    // required double weight = 4;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // required bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void record_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const record_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const record_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void record_t::MergeFrom(const record_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void record_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void record_t::CopyFrom(const record_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool record_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void record_t::Swap(record_t* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(parent_, other->parent_);
    std::swap(weight_, other->weight_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata record_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = record_t_descriptor_;
  metadata.reflection = record_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int file_t::kHeaderFieldNumber;
const int file_t::kNodesFieldNumber;
#endif  // !_MSC_VER

file_t::file_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void file_t::InitAsDefaultInstance() {
  header_ = const_cast< ::header_t*>(&::header_t::default_instance());
}

file_t::file_t(const file_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void file_t::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

file_t::~file_t() {
  SharedDtor();
}

void file_t::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void file_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* file_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_t_descriptor_;
}

const file_t& file_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_record_2eproto();
  return *default_instance_;
}

file_t* file_t::default_instance_ = NULL;

file_t* file_t::New() const {
  return new file_t;
}

void file_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::header_t::Clear();
    }
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool file_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .header_t header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        break;
      }

      // repeated .record_t nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void file_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .header_t header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated .record_t nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* file_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .header_t header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated .record_t nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int file_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .header_t header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated .record_t nodes = 2;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void file_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const file_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const file_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void file_t::MergeFrom(const file_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::header_t::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void file_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void file_t::CopyFrom(const file_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool file_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void file_t::Swap(file_t* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata file_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = file_t_descriptor_;
  metadata.reflection = file_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
